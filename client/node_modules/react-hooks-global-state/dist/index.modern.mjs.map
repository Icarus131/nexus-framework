{"version":3,"file":"index.modern.mjs","sources":["../src/createContainer.ts","../src/createGlobalState.ts","../src/createStore.ts","../src/devtools.ts"],"sourcesContent":["import {\n  Dispatch,\n  Reducer,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\n\n// utility functions\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n// constants\n\nconst UPDATE_STATE = (\n  process.env.NODE_ENV !== 'production' ? Symbol('UPDATE_STATE')\n  /* for production */ : Symbol()\n);\n\nconst PROP_UPDATER = 'r';\nconst PROP_STATE = 'e';\n\n// createContainer\n\nexport const createContainer = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State,\n) => {\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  let globalState = initialState;\n\n  type PA1 = { type: typeof UPDATE_STATE; [PROP_UPDATER]: (prev: State) => State };\n  type PA2 = { type: typeof UPDATE_STATE; [PROP_STATE]: State };\n  type PatchAction = PA1 | PA2;\n  let linkedDispatch: Dispatch<Action | PatchAction> | null = null;\n\n  const listeners = {} as {\n    [StateKey in StateKeys]: Set<Dispatch<SetStateAction<State[StateKey]>>>;\n  };\n  keys.forEach((key) => { listeners[key as StateKeys] = new Set(); });\n\n  const patchedReducer = (state: State, action: Action | PatchAction) => {\n    // how can it be typed more properly?\n    if ((action as { type: unknown }).type === UPDATE_STATE) {\n      return (action as { [PROP_UPDATER]: unknown })[PROP_UPDATER]\n        ? (action as PA1)[PROP_UPDATER](state)\n        : (action as PA2)[PROP_STATE];\n    }\n    return reducer(state, action as Action);\n  };\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (previousState: State): State => ({\n      ...previousState,\n      [stateKey]: updateValue(previousState[stateKey], update),\n    });\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_UPDATER]: updater });\n    } else {\n      globalState = updater(globalState);\n      const nextPartialState = globalState[stateKey];\n      listeners[stateKey].forEach((listener) => listener(nextPartialState));\n    }\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        listeners[key as StateKeys].forEach((listener) => listener(nextPartialState));\n      }\n    });\n  };\n\n  const useGlobalStateProvider = () => {\n    const [state, dispatch] = useReducer(patchedReducer, globalState);\n    useEffect(() => {\n      if (linkedDispatch) throw new Error('Only one global state provider is allowed');\n      linkedDispatch = dispatch;\n      // in case it's changed before this effect is handled\n      dispatch({ type: UPDATE_STATE, [PROP_STATE]: globalState });\n      const cleanup = () => {\n        linkedDispatch = null;\n      };\n      return cleanup;\n    }, []);\n    const prevGlobalState = useRef(state);\n    notifyListeners(prevGlobalState.current, state);\n    prevGlobalState.current = state;\n    useEffect(() => {\n      globalState = state;\n    }, [state]);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const [partialState, setPartialState] = useState(globalState[stateKey]);\n    useEffect(() => {\n      listeners[stateKey].add(setPartialState);\n      setPartialState(globalState[stateKey]); // in case it's changed before this effect is handled\n      const cleanup = () => {\n        listeners[stateKey].delete(setPartialState);\n      };\n      return cleanup;\n    }, [stateKey]);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return globalState[stateKey];\n  };\n\n  const getWholeState = () => globalState;\n\n  const setWholeState = (nextGlobalState: State) => {\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_STATE]: nextGlobalState });\n    } else {\n      const prevGlobalState = globalState;\n      globalState = nextGlobalState;\n      notifyListeners(prevGlobalState, globalState);\n    }\n  };\n\n  const dispatchAction = (action: Action) => {\n    if (linkedDispatch) {\n      linkedDispatch(action);\n    } else {\n      const prevGlobalState = globalState;\n      globalState = reducer(globalState, action);\n      notifyListeners(prevGlobalState, globalState);\n    }\n    return action;\n  };\n\n  return {\n    useGlobalStateProvider,\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    getState: getWholeState,\n    setState: setWholeState, // for devtools.js\n    dispatch: dispatchAction,\n  };\n};\n","import { createContainer } from './createContainer';\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getGlobalState'\n  | 'setGlobalState';\n\n/**\n * create a global state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const store = createContainer((state: State, _action: never) => state, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","import { Reducer } from 'react';\n\nimport { createContainer } from './createContainer';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getState'\n  | 'dispatch';\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const store = createContainer(reducer, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"],"names":["validateStateKey","keys","stateKey","includes","Error","UPDATE_STATE","process","env","NODE_ENV","Symbol","createContainer","reducer","initialState","Object","globalState","linkedDispatch","listeners","forEach","key","Set","patchedReducer","state","action","type","setGlobalState","update","updater","previousState","oldValue","newValue","r","nextPartialState","listener","notifyListeners","prevState","nextState","useGlobalStateProvider","dispatch","useReducer","useEffect","e","prevGlobalState","useRef","current","useGlobalState","partialState","setPartialState","useState","add","delete","useCallback","u","getGlobalState","getState","setState","nextGlobalState","createGlobalState","_action","createStore","undefined","enhancer","reduxDevToolsExt","window","__REDUX_DEVTOOLS_EXTENSION__","f","before","after","savedReducer","savedInitialState","store","value","devState","computedStates","currentStateIndex","subscribe","push","index","indexOf","splice","createEnhancers","fns","reduce","p","c","args","compose"],"mappings":"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"}