{"version":3,"file":"index.umd.js","sources":["../src/createContainer.ts","../src/createGlobalState.ts","../src/createStore.ts","../src/devtools.ts"],"sourcesContent":["import {\n  Dispatch,\n  Reducer,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\n\n// utility functions\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n// constants\n\nconst UPDATE_STATE = (\n  process.env.NODE_ENV !== 'production' ? Symbol('UPDATE_STATE')\n  /* for production */ : Symbol()\n);\n\nconst PROP_UPDATER = 'r';\nconst PROP_STATE = 'e';\n\n// createContainer\n\nexport const createContainer = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State,\n) => {\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  let globalState = initialState;\n\n  type PA1 = { type: typeof UPDATE_STATE; [PROP_UPDATER]: (prev: State) => State };\n  type PA2 = { type: typeof UPDATE_STATE; [PROP_STATE]: State };\n  type PatchAction = PA1 | PA2;\n  let linkedDispatch: Dispatch<Action | PatchAction> | null = null;\n\n  const listeners = {} as {\n    [StateKey in StateKeys]: Set<Dispatch<SetStateAction<State[StateKey]>>>;\n  };\n  keys.forEach((key) => { listeners[key as StateKeys] = new Set(); });\n\n  const patchedReducer = (state: State, action: Action | PatchAction) => {\n    // how can it be typed more properly?\n    if ((action as { type: unknown }).type === UPDATE_STATE) {\n      return (action as { [PROP_UPDATER]: unknown })[PROP_UPDATER]\n        ? (action as PA1)[PROP_UPDATER](state)\n        : (action as PA2)[PROP_STATE];\n    }\n    return reducer(state, action as Action);\n  };\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (previousState: State): State => ({\n      ...previousState,\n      [stateKey]: updateValue(previousState[stateKey], update),\n    });\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_UPDATER]: updater });\n    } else {\n      globalState = updater(globalState);\n      const nextPartialState = globalState[stateKey];\n      listeners[stateKey].forEach((listener) => listener(nextPartialState));\n    }\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        listeners[key as StateKeys].forEach((listener) => listener(nextPartialState));\n      }\n    });\n  };\n\n  const useGlobalStateProvider = () => {\n    const [state, dispatch] = useReducer(patchedReducer, globalState);\n    useEffect(() => {\n      if (linkedDispatch) throw new Error('Only one global state provider is allowed');\n      linkedDispatch = dispatch;\n      // in case it's changed before this effect is handled\n      dispatch({ type: UPDATE_STATE, [PROP_STATE]: globalState });\n      const cleanup = () => {\n        linkedDispatch = null;\n      };\n      return cleanup;\n    }, []);\n    const prevGlobalState = useRef(state);\n    notifyListeners(prevGlobalState.current, state);\n    prevGlobalState.current = state;\n    useEffect(() => {\n      globalState = state;\n    }, [state]);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const [partialState, setPartialState] = useState(globalState[stateKey]);\n    useEffect(() => {\n      listeners[stateKey].add(setPartialState);\n      setPartialState(globalState[stateKey]); // in case it's changed before this effect is handled\n      const cleanup = () => {\n        listeners[stateKey].delete(setPartialState);\n      };\n      return cleanup;\n    }, [stateKey]);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return globalState[stateKey];\n  };\n\n  const getWholeState = () => globalState;\n\n  const setWholeState = (nextGlobalState: State) => {\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_STATE]: nextGlobalState });\n    } else {\n      const prevGlobalState = globalState;\n      globalState = nextGlobalState;\n      notifyListeners(prevGlobalState, globalState);\n    }\n  };\n\n  const dispatchAction = (action: Action) => {\n    if (linkedDispatch) {\n      linkedDispatch(action);\n    } else {\n      const prevGlobalState = globalState;\n      globalState = reducer(globalState, action);\n      notifyListeners(prevGlobalState, globalState);\n    }\n    return action;\n  };\n\n  return {\n    useGlobalStateProvider,\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    getState: getWholeState,\n    setState: setWholeState, // for devtools.js\n    dispatch: dispatchAction,\n  };\n};\n","import { createContainer } from './createContainer';\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getGlobalState'\n  | 'setGlobalState';\n\n/**\n * create a global state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const store = createContainer((state: State, _action: never) => state, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","import { Reducer } from 'react';\n\nimport { createContainer } from './createContainer';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getState'\n  | 'dispatch';\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const store = createContainer(reducer, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"],"names":["validateStateKey","keys","stateKey","includes","Error","UPDATE_STATE","process","env","NODE_ENV","Symbol","createContainer","reducer","initialState","Object","globalState","linkedDispatch","listeners","forEach","key","Set","patchedReducer","state","action","type","setGlobalState","update","updater","previousState","newValue","nextPartialState","listener","notifyListeners","prevState","nextState","useGlobalStateProvider","useReducer","dispatch","useEffect","prevGlobalState","useRef","current","useGlobalState","useState","partialState","setPartialState","add","useCallback","u","getGlobalState","getState","setState","nextGlobalState","_action","createStore","enhancer","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","reduce","p","c","compose","savedReducer","savedInitialState","store","devState","computedStates","currentStateIndex","f","subscribe","push","index","indexOf","splice"],"mappings":"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"}